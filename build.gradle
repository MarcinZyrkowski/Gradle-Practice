plugins {
    id 'java' // java core functionality
    id 'application' // Apply the application plugin to add support for building a CLI application in Java.
    id 'checkstyle'
}
// a clean build file should always have a plugins block in the top

// this 'java' extension is added by java plugin
java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
}

group = "org.example"
version = "1.0-SNAPSHOT"

repositories {
    mavenCentral()
}

// one way of extracting versions for simple projects
ext {
    junitVersion = '5.10.0'
    lombokVersion = '1.18.22'
}

dependencies {
    implementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    // junit test engine is required

    implementation "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation libs.javafaker

    implementation 'com.puppycrawl.tools:checkstyle:10.12.4'
}

tasks.test {
    useJUnitPlatform()
}

// Define the main class for the application.
application {
    mainClassName = 'org.example.Main'
}


// registered simple task
tasks.register("hello") {
    doLast {
        println("hello - task")
    }
}

checkstyle {
    toolVersion = '10.12.4' // Specify your Checkstyle version
    configFile = file('config/checkstyle/google_checks.xml') // Path to your custom Checkstyle configuration
}

tasks.register('verifyMyOwnCheckstyle', Checkstyle) {
    source 'src/main/java' // Customize source sets as needed
    source 'src/test/java'

    include '**/*.java'   // Customize inclusion patterns

    // set classpath
    classpath = files(configurations.checkstyle)

    // Fail the build if Checkstyle violations are found
    ignoreFailures = false

    dependsOn tasks.checkstyleMain, tasks.checkstyleTest
}
